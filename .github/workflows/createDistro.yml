name: Create Distro
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js 20
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Replace Java Path
        working-directory: "Nebula/NebulaRepo"
        run: sed -i 's/JAVA_EXECUTABLE=.*/JAVA_EXECUTABLE=\/usr\/lib\/jvm\/temurin-21-jdk-amd64\/bin\/java/g' .env

      - name: Install dependencies
        working-directory: "Nebula/NebulaRepo"
        run: npm install

      - name: Init root
        working-directory: "Nebula/NebulaRepo"
        run: npm run start -- init root

      - name: Generate Distro
        working-directory: "Nebula/NebulaRepo"
        run: npm start -- generate distro

      - name: Generate Distro Zip
        run: zip -9 result.zip Nebula/NebulaRoot/*

      - name: Get short SHA
        id: short_sha
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            # Using short SHA from 2nd step for tag and release name.
          tag_name: ${{steps.short_sha.outputs.sha8}}
          release_name: ${{steps.short_sha.outputs.sha8}}
          draft: false
          prerelease: false
            # Now we upload the artifact we generated in the first step to
            # the release we created in the 3nd step
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing its ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./result.zip
          asset_name: result.zip
          asset_content_type: application/zip

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: epochdistupload
          password: ${{ secrets.SSH_PWD }}
          port: ${{ secrets.PORT }}
          script: |
            cd webroot && rm -r * || true
            wget https://github.com/EpochCraft/Modpacks/releases/download/${{steps.short_sha.outputs.sha8}}/result.zip -O result.zip
            unzip result.zip